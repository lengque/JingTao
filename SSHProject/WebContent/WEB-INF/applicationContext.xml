<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-3.1.xsd">

    <!-- 定义数据源的信息 -->  
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"  
        destroy-method="close">  
        <property name="driverClass">  
            <value>com.mysql.jdbc.Driver</value>  
        </property>  
        <property name="jdbcUrl">  
            <value>jdbc:mysql://localhost/SSH</value>  
        </property>  
        <property name="user">  
            <value>root</value>  
        </property>  
        <property name="password">  
            <value>1234</value>  
        </property>  
        <property name="maxPoolSize">  
            <value>80</value>  
        </property>  
        <property name="minPoolSize">  
            <value>1</value>  
        </property>  
        <property name="initialPoolSize">  
            <value>1</value>  
        </property>  
        <property name="maxIdleTime">  
            <value>20</value>  
        </property>  
    </bean>
    <!--定义Hibernate的SessionFactory -->  
    <!-- SessionFactory使用的数据源为上面的数据源 -->  
    <!-- 指定了Hibernate的映射文件和配置信息 -->  
   <bean id="sessionFactory"  
        class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="dataSource">  
            <ref local="dataSource" />  
        </property>  
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>  
                <prop key="show_sql">true</prop>  
                <prop key="hibernate.jdbc.batch_size">20</prop>  
                <prop key="hibernate.hbm2ddl.auto">update</prop>
				<prop key="hibernate.format_sql">true</prop>
            </props>  
        </property>
        
        <property name="mappingResources">  
            <list>  
            	<value>model/User.hbm.xml</value>
            </list>
        </property>
    </bean>
    
    <!-- 事物的控制 -->
    <bean id="transactionManager"  
        class="org.springframework.orm.hibernate4.HibernateTransactionManager">  
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>
    
    <!-- enables scanning for @Transactional annotations -->
	<tx:annotation-driven/>
	
  	<!-- 事务拦截器 -->
  	<bean id="transactionInterceptor"
		class="org.springframework.transaction.interceptor.TransactionInterceptor">
		<!-- 事务拦截器bean需要依赖注入一个事务管理器 -->
		<property name="transactionManager" ref="transactionManager" />
		
		<property name="transactionAttributes">
			<!-- 下面定义事务传播属性 -->
			<props>
				<prop key="save*">PROPAGATION_REQUIRED</prop>
				<prop key="check*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="delete*">PROPAGATION_REQUIRED</prop>
				<prop key="update*">PROPAGATION_REQUIRED</prop>
			</props>
		</property>
	</bean>
	
	<!-- 自动代理 -->
	<bean id="autoProxy"
		class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
		<property name="beanNames">
			<list>
				<value>*Service</value>
			</list>
		</property>	
		<property name="interceptorNames">
			<list>
				<value>transactionInterceptor</value>
			</list>
		</property>
	</bean>
  	
  	<!-- 管理用户 -->  
    <bean id="userController" class="controller.UserController">  
        <property name="userService" ref="userService"/>
        <property name="userConverter" ref="userConverter"/>
    </bean>
    
    <!-- 管理目录 -->  
    <bean id="categoryController" class="controller.CategoryController">  
        <property name="categoryService" ref="categoryService"/>
    </bean>
  	
  	<!-- userDao -->
  	<bean id="baseDao" class="daoImpl.BaseDaoImpl">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
    
    <bean id="userDao" class="daoImpl.UserDao">
          <property name="baseDao" ref="baseDao"/>
    </bean>
    
    <bean id="categoryDao" class="daoImpl.CategoryDao">
          <property name="baseDao" ref="baseDao"/>
    </bean>
    
    <!--user service -->
	<bean id="userService" class="serviceImpl.UserServiceImpl">  
       <property name="userDao" ref="userDao"/>
       <property name="saveValidators">
        	<list>
                <ref bean="userNameExistValidator" />
        	</list>
        </property>
        
        <property name="modifyUserInfoValidators">
        	<list>
                <ref bean="userNameExistValidator" />
        	</list>
        </property>
        
        <property name="modifyUserPswValidators">
        	<list>
                <ref bean="userNameExistValidator" />
        	</list>
        </property>
        
         <property name="deleteUserValidators">
        	<list>
                <ref bean="userNameExistValidator" />
        	</list>
        </property>
    </bean>
    
     <!--category service -->
	<bean id="categoryService" class="serviceImpl.CategoryServiceImpl">  
       <property name="categoryDao" ref="categoryDao"/>
    </bean>
    
    <!-- more bean definitions go here -->
    <bean id="userConverter" class="converter.UserConverter"/>
    
    <!-- validators start -->
    <!-- username is exist in db -->
    <bean id="userNameExistValidator" class="validatorImpl.UserNameExistValidator">
    	<property name="userDao" ref="userDao"/>
    </bean>
    <!-- validators end -->
    
    <!--interceptors start-->
    <bean id="loginInterceptor" class="Interceptor.LoginInterceptor"/>
    <!--interceptors end-->
</beans>  